= simple_nested_form_for @challenge, html: { class: 'form-horizontal remote accept-file-upload sortable' }, wrapper: :bootstrap3_horizontal do |f|
  = f.error_notification

  .row
    .col-xs-12
      .header.clearfix
        h3.pull-left
          | Challenge settings
        .pull-right
          ul.list-unstyled.list-inline
            - if current_user.is? :admin
              li= link_to 'Edit as admin', edit_admin_challenge_path(@challenge), class: 'btn btn-warning btn-sm'
            li= f.submit 'Save changes', class: 'btn btn-primary btn-sm'
            li= link_to 'Cancel', @challenge, class: 'btn-link btn-sm'
      hr

  .row
    .col-xs-12
      .panel.panel-default
        .panel-heading
          h4 Page settings
        .panel-body
          = f.input :name, label: 'Title'
          = f.input :new_slug, label: 'Challenge URL', wrapper: :addon do
            span.input-group-addon hackster.io/challenges/
            = f.input_field :new_slug
          = render partial: 'shared/image_form', locals: { file_type: 'cover_image', human_file_type: 'Cover image', image_link: @challenge.cover_image.try(:imgix_url), help_block: 'A high definition shot, at least 1600px wide and 430px high.', attribute_type: 'cover_image', image_version: nil, model: 'challenge' }
          = f.input :video_link, label: 'Video link'
          = f.input :teaser, as: :text, input_html: { rows: 2 }, hint: 'Maximum 140 characters.'
          = f.input :custom_tweet, as: :text, input_html: { rows: 2 }, hint: "Maximum 140 characters. Default: '#{@challenge.decorate.default_tweet}'"

      .panel.panel-default
        .panel-heading
          h4 Challenge settings
        .panel-body
          = f.input :activate_pre_registration, as: :boolean, inline_label: 'Enable pre-registration', label: false, hint: "You can let users register for the challenge before it's open for submissions."
          #pre_registration_settings style=(@challenge.activate_pre_registration ? '' : 'display:none')
            = f.input :pre_registration_start_date_dummy, label: 'Pre-registration start date', wrapper_html: { id: 'pre_registration_start_date_dummy', class: 'datetimepicker' }, hint: "The first date when makers can start registering for the challenge. They will not be able to enter submissions yet. Times are PT (-08)." do
              #datepicker.input-group
                = f.input_field :pre_registration_start_date_dummy, as: :string, label: false
                span.input-group-addon
                  i.fa.fa-calendar
            = f.input :pre_registration_start_date, as: :hidden, input_html: { id: 'pre_registration_start_date' }

          = f.input :activate_pre_contest, as: :boolean, inline_label: 'Enable pre-contest', label: false, hint: "This will allow participants to submit ideas to win hardware which they can use to enter the contest."
          #pre_contest_settings style=(@challenge.activate_pre_contest ? '' : 'display:none')
            = f.input :idea_survey_link, label: 'Idea form link', hint: 'The link to the form where ideas for the pre-contest will be collected.'
            = f.input :pre_contest_start_date_dummy, label: 'Pre-contest start date', wrapper_html: { id: 'pre_contest_start_date_dummy', class: 'datetimepicker' }, hint: "Participants will be able to submit ideas for the pre-contest starting this date. Times are PT (-08)." do
              #datepicker.input-group
                = f.input_field :pre_contest_start_date_dummy, as: :string, label: false
                span.input-group-addon
                  i.fa.fa-calendar
            = f.input :pre_contest_start_date, as: :hidden, input_html: { id: 'pre_contest_start_date' }
            = f.input :pre_contest_end_date_dummy, label: 'Pre-contest end date', wrapper_html: { id: 'pre_contest_end_date_dummy', class: 'datetimepicker' }, hint: "The deadline to enter the pre-contest. Times are PT (-08)." do
              #datepicker.input-group
                = f.input_field :pre_contest_end_date_dummy, as: :string, label: false
                span.input-group-addon
                  i.fa.fa-calendar
            = f.input :pre_contest_end_date, as: :hidden, input_html: { id: 'pre_contest_end_date' }
            = f.input :pre_winners_announced_date_dummy, label: 'Pre-contest winners announcement date', wrapper_html: { id: 'pre_winners_announced_date_dummy', class: 'datetimepicker' }, hint: "The date when you plan on announcing winners of the pre-contest. Only the date will show (not time). Times are PT (-08)." do
              #datepicker.input-group
                = f.input_field :pre_winners_announced_date_dummy, as: :string, label: false
                span.input-group-addon
                  i.fa.fa-calendar
            = f.input :pre_winners_announced_date, as: :hidden, input_html: { id: 'pre_winners_announced_date' }

          = f.input :start_date_dummy, label: 'Challenge start date', wrapper_html: { id: 'start_date_dummy', class: 'datetimepicker' }, hint: "Participants will be able to enter projects starting that date. Times are PT (-08)." do
            #datepicker.input-group
              = f.input_field :start_date_dummy, as: :string, label: false
              span.input-group-addon
                i.fa.fa-calendar
          = f.input :start_date, as: :hidden, input_html: { id: 'start_date' }
          = f.input :end_date_dummy, label: 'Challenge end date', wrapper_html: { id: 'end_date_dummy', class: 'datetimepicker' }, hint: "The maximum date by which makers can submit entries to the challenge. Times are PT (-08)." do
            #datepicker.input-group
              = f.input_field :end_date_dummy, as: :string, label: false
              span.input-group-addon
                i.fa.fa-calendar
          = f.input :end_date, as: :hidden, input_html: { id: 'end_date' }
          = f.input :winners_announced_date_dummy, label: 'Winners announcement date', wrapper_html: { id: 'winners_announced_date_dummy', class: 'datetimepicker' }, hint: "The date when you plan on announcing winners. Only the date will show (not time). Times are PT (-08)." do
            #datepicker.input-group
              = f.input_field :winners_announced_date_dummy, as: :string, label: false
              span.input-group-addon
                i.fa.fa-calendar
          = f.input :winners_announced_date, as: :hidden, input_html: { id: 'winners_announced_date' }

          = f.input :multiple_entries, inline_label: 'Allow more than one entry per person?', as: :boolean, label: false
          = f.input :auto_approve, inline_label: 'Automatically approve all entries', as: :boolean, label: false, hint: "When an entry is approved, a confirmation email is sent to its author. Whether you choose to automatically approve entries or not, you will be able to approve and disqualify entries from the dashboard at all times."
          = f.input :description, as: :text, input_html: { rows: 10, class: 'text-editor' }
          = f.input :eligibility, as: :text, input_html: { rows: 10, class: 'text-editor' }
          = f.input :requirements, as: :text, input_html: { rows: 10, class: 'text-editor' }
          = f.input :judging_criteria, as: :text, input_html: { rows: 10, class: 'text-editor' }
          = f.input :how_to_enter, as: :text, input_html: { rows: 10, class: 'text-editor' }
          = f.input :rules, as: :text, input_html: { rows: 20, class: 'text-editor' }

      .panel.panel-default
        .panel-heading
          h4
            | Awards
        .panel-body
          - @challenge.prizes.new if @challenge.prizes.empty?
          table#sortable.table.table-condensed.table-sortable
            thead
              th
              th Award Name
              th Prize description
              th Cash value
              th Link
              th Quantity available
              th Requires shipping
              th
            tbody
              - @challenge.prizes.each do |prize|
                = f.simple_fields_for :prizes, prize, wrapper: false do |f_prize|
                  tr.fields
                    td
                      i.fa.fa-bars.handle
                      = f_prize.input :id, as: :hidden
                      = f_prize.input :position, as: :hidden, input_html: { class: 'position' }
                    td  style='width:20%'
                      table
                        tr
                          td= f_prize.input :name, label: false, wrapper: false, placeholder: 'Eg: First place'
                        tr
                          - image = prize.image || prize.build_image
                          td= f_prize.simple_fields_for :image do |f_image|
                            - if image and image.file_url
                              = image_tag image.file_url, class: 'img-responsive'
                            = f_image.input :file, label: false, as: :file
                    td  style='width:30%'  = f_prize.input :description, label: false, wrapper: false, input_html: { rows: 4 }, placeholder: 'Eg: iPad Air'
                    td= f_prize.input :cash_value, label: false, wrapper: false
                    td style='width:15%' = f_prize.input :link, label: false, wrapper: false
                    td= f_prize.input :quantity, label: false, wrapper: false
                    td= f_prize.input :requires_shipping, label: false, wrapper: false
                    td= f_prize.link_to_remove content_tag(:i, '', class: 'fa fa-trash-o'), class: 'btn btn-xs btn-danger'
              tr.sortable-disabled
                td  colspan=5  = f.link_to_add 'Add another prize', :prizes, class: 'btn btn-xs btn-success nested-field-table'

      .panel.panel-default
        .panel-heading
          h4 Voting
        .panel-body
          = f.input :activate_voting, as: :boolean, inline_label: 'Activate voting', label: false, input_html: { id: 'challenge_activate_voting' }
          #voting_dates style=(@challenge.activate_voting ? '' : 'display:none')
            = f.input :allow_anonymous_votes, as: :boolean, inline_label: 'Allow anonymous votes', label: false, hint: "Not recommended. This makes it possible for contestants to fake the number of votes."
            = f.input :voting_start, label: 'Voting starts on', collection: Challenge::VOTING_START_OPTIONS
            = f.input :voting_end_date_dummy, label: 'Voting ends on', wrapper_html: { id: 'voting_end_date_dummy', class: 'datetimepicker', autocomplete: 'off' } do
              #datepicker.input-group
                = f.input_field :voting_end_date_dummy, as: :string, label: false
                span.input-group-addon
                  i.fa.fa-calendar
            = f.input :voting_end_date, as: :hidden, input_html: { id: 'voting_end_date' }

      .panel.panel-default
        .panel-heading
          h4 Password protection
        .panel-body
          = f.input :password_protect, as: :boolean, inline_label: 'Enable password protection', label: false
          = f.input :password, hint: 'Only if password protection is enabled', as: :string

      .panel.panel-default
        .panel-heading
          h4 Mailchimp settings
        .panel-body
          = f.input :activate_mailchimp_sync, as: :boolean, inline_label: 'Activate sync with Mailchimp', label: false, hint: 'Note: we do not verify if your credentials are correct. If you do not see any updates on your list after activating this option, please double check your credentials.'
          #mailchimp_settings style=(@challenge.activate_mailchimp_sync ? '' : 'display:none')
            - if @challenge.activate_mailchimp_sync
              .form-group
                .col-md-4
                  label.control-label Last synced
                .col-md-8
                  - if @challenge.mailchimp_last_synced_at
                    => l @challenge.mailchimp_last_synced_at.in_time_zone(PDT_TIME_ZONE)
                    | PDT
                  - else
                    | Never
                  - if @challenge.mailchimp_setup?
                    = link_to 'Update now', update_mailchimp_challenge_path(@challenge), class: 'btn btn-link btn-sm', data: { method: :patch }
            = f.input :mailchimp_api_key, label: 'Mailchimp API key', hint: 'API key of the Mailchimp account you want to sync with'
            = f.input :mailchimp_list_id, label: 'Mailchimp List ID', hint: 'List ID of the Mailchimp list you want to sync with'

      - if current_user.is? :admin
        .panel.panel-default
          .panel-heading
            h4 Admin stuff
          .panel-body
            = f.input :platform_id, label: 'Promoted platform', collection: Platform.order(:full_name)
            = f.input :activate_banners, inline_label: 'Activate banners', label: false, hint: 'Whether to display banners on sponsor platform hub (only when challenge is active).', as: :boolean
            .col-md-8.col-md-offset-4 -or-
            = f.input :sponsor_name
            = f.input :sponsor_link
            = f.input :custom_css, as: :text
            = render partial: 'shared/image_form', locals: { file_type: 'avatar', human_file_type: 'Logo', image_link: @challenge.avatar.try(:imgix_url), help_block: "In case the challenge isn't tied to a platform.", attribute_type: 'avatar', image_version: :big, model: 'challenge' }
            = f.simple_fields_for :challenge_admins do |f_admin|
              = f_admin.input :user_id, label: 'Admin user ID'
              = f_admin.input :roles, label: 'Roles', collection: ChallengeAdmin.roles
              .col-sm-8.col-sm-offset-4= f_admin.link_to_remove 'Remove this admin'
            = f.link_to_add 'Add an admin', :challenge_admins
            .form-group
              .col-md-8.col-md-offset-4
                strong.text-danger USE ONLY IF YOU KNOW HOW TO:
            = f.input :enter_button_text, hint: "This will override the enter button text. The default is '#{@challenge.default_enter_button_text}'."
            = f.input :custom_status, hint: 'This will override the status.'
            = f.input :disable_projects_tab, inline_label: 'Disable projects tab', as: :boolean, label: false, hint: 'When submissions are done outside of Hackster'
            = f.input :disable_registration, as: :boolean, inline_label: 'Disable registration', label: false, hint: "Temporary option to make old contests work as expected. DO NOT USE FOR NEW CONTESTS."

      .panel.panel-default
        .panel-heading
          h4 Danger zone
        .panel-body
          = f.input :ready, as: :boolean, inline_label: "This challenge is ready for launch!", label: false, hint: "When you're ready, check this box to tell the system that it can automatically launch the challenge on the dates specified in the settings."
          .form-group
            .col-md-8.col-md-offset-4
              - case @challenge.workflow_state.to_sym
              / - when :new
                = link_to 'Launch challenge', update_workflow_challenge_path(@challenge, event: 'launch'), method: :put, class: 'btn btn-success btn-sm', data: { confirm: "Let's do this. Sure?" }
              - when :pre_registration, :in_progress, :pre_contest_in_progress, :pre_contest_ended
                = link_to 'Take offline', update_workflow_challenge_path(@challenge, event: 'take_offline'), method: :put, class: 'btn btn-warning btn-sm', data: { confirm: "Sure?" }
              - when :judging
                - if current_user.is? :admin
                  = link_to 'Reinitialize', update_workflow_challenge_path(@challenge, event: 'reinitialize'), method: :put, class: 'btn btn-warning btn-sm', data: { confirm: "Sure?" }
              - if @challenge.can_cancel?
                = link_to 'Cancel challenge', update_workflow_challenge_path(@challenge, event: 'cancel'), method: :put, class: 'btn btn-danger btn-sm', data: { confirm: "Are you sure you want to cancel this challenge? There's no way back!" }
          - if @challenge.new? or current_user.is? :admin
            .form-group
              .col-md-8.col-md-offset-4= link_to 'Delete challenge', challenge_path(@challenge), method: :delete, class: 'btn btn-danger btn-sm', data: { confirm: "Are you sure? There's no coming back!" }

  .row
    .col-xs-12
      hr
      .pull-right
        ul.list-unstyled.list-inline
          li= f.submit 'Save changes', class: 'btn btn-primary btn-sm'
          li= link_to 'Cancel', @challenge, class: 'btn-link btn-sm'

= content_for :head do
  = stylesheet_link_tag 'datepicker'

= content_for :js do
  = tinymce_assets
  = javascript_include_tag 'datepicker'

  javascript:
    $('.datetimepicker').datetimepicker({
      icons: {
        time: "fa fa-clock-o",
        date: "fa fa-calendar",
        up: "fa fa-arrow-up",
        down: "fa fa-arrow-down"
      },
      sideBySide: true
    });

    $('#pre_registration_start_date_dummy').on('change', function(){
      $('#pre_registration_start_date').val($('#pre_registration_start_date_dummy').data("DateTimePicker").getDate());
    });
    $('#pre_contest_start_date_dummy').on('change', function(){
      $('#pre_contest_start_date').val($('#pre_contest_start_date_dummy').data("DateTimePicker").getDate());
    });
    $('#pre_contest_end_date_dummy').on('change', function(){
      $('#pre_contest_end_date').val($('#pre_contest_end_date_dummy').data("DateTimePicker").getDate());
    });
    $('#start_date_dummy').on('change', function(){
      $('#start_date').val($('#start_date_dummy').data("DateTimePicker").getDate());
    });
    $('#end_date_dummy').on('change', function(){
      $('#end_date').val($('#end_date_dummy').data("DateTimePicker").getDate());
    });
    $('#winners_announced_date_dummy').on('change', function(){
      $('#winners_announced_date').val($('#winners_announced_date_dummy').data("DateTimePicker").getDate());
    });
    $('#pre_winners_announced_date_dummy').on('change', function(){
      $('#pre_winners_announced_date').val($('#pre_winners_announced_date_dummy').data("DateTimePicker").getDate());
    });
    $('#voting_end_date_dummy').on('change', function(){
      $('#voting_end_date').val($(this).data("DateTimePicker").getDate());
    });

    $('#challenge_activate_voting').on('change', function(){
      if ($(this).is(':checked')) {
        $('#voting_dates').slideDown();
      } else {
        $('#voting_dates').slideUp();
      }
    });
    $('#challenge_activate_pre_registration').on('change', function(){
      if ($(this).is(':checked')) {
        $('#pre_registration_settings').slideDown();
      } else {
        $('#pre_registration_settings').slideUp();
      }
    });
    $('#challenge_activate_pre_contest').on('change', function(){
      if ($(this).is(':checked')) {
        $('#pre_contest_settings').slideDown();
      } else {
        $('#pre_contest_settings').slideUp();
      }
    });
    $('#challenge_activate_mailchimp_sync').on('change', function(){
      if ($(this).is(':checked')) {
        $('#mailchimp_settings').slideDown();
      } else {
        $('#mailchimp_settings').slideUp();
      }
    });

    jQuery(function($) {
      tinyMCE.init({
        selector: 'textarea.text-editor',
        toolbar: "undo redo | bold italic underline | alignleft aligncenter alignright | link unlink | bullist numlist | image media",
        menubar: false,
        plugins: 'link paste image media',
        statusbar: false
      });
    });

= content_for :head do
  css:
    .text-editor { overflow:scroll; max-height:300px }
