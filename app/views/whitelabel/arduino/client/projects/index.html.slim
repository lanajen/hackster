/ = content_for :head do
  meta  name='robots' content='noindex'
  = auto_discovery_link_tag :rss, root_path(format: :rss, sort: 'recent'), title: "Most recent projects - #{site_name}"
  = auto_discovery_link_tag :atom, root_path(format: :atom, sort: 'recent'), title: "Most recent projects - #{site_name}"

- insert_stats current_platform

- content_for :head do
  meta(property="og:title" content="#{current_platform.name} projects")
  meta(property="og:description" content=meta_desc)
  - if current_platform.logo
    meta(property="og:image" content=current_platform.logo.file_url)
    meta(property="twitter:image:src" content=current_platform.logo.file_url)
  meta(property="og:url" content="http://#{site_domain}")
  meta(property="og:site_name" content=site_name)
  - if site_twitter.present?
    meta(property="twitter:site" content=site_twitter)
  meta(property="twitter:card" content="summary")
  meta(property="twitter:domain" content=site_domain)
  meta(property="twitter:title" content=site_name)
  meta(property="twitter:description" content=meta_desc)
  link(rel="canonical" href="http://#{site_domain}")

.content.projects
  - if @announcement and @announcement.published?
    .alert.alert-info.text-center
      strong> Announcement:
      = link_to @announcement.title, platform_announcement_path(@announcement), class: 'alert-link'
  - elsif @challenge
    .alert.alert-info.text-center
      strong> #{current_platform.name} is holding a contest!
      ' Join
      => link_to @challenge.name, "https://www.hackster.io/challenges/#{@challenge.slug}", class: 'alert-link'
      | on Hackster.io

  - if user_signed_in?
    = link_to content_tag(:span, 'My dashboard'), current_user, class: 'btn btn-primary', id: 'my_dashboard-mobile'

  .mg-20.clearfix
    .btn-group.btn-group-default
      .filters-container
        .btn-group
          button#filter-by.btn.btn-default.btn-sm.dropdown-toggle*{ data: { toggle: 'dropdown' } }
            - case params[:by]
            - when nil
              ' All projects
            - when 'toolbox'
              ' In my toolbox
            - when '7days'
              ' Last 7 days
            - when '30days'
              ' Last 30 days
            - when '1year'
              ' Last 12 months
            span.caret
          ul.dropdown-menu.pull-right
            li*{ class: "#{'active' if params[:by] == nil}" } = link_to 'All projects', root_path(sort: params[:sort])
            - if user_signed_in?
              li*{ class: "#{'active' if params[:by] == 'toolbox'}" } = link_to 'In my toolbox', root_path(by: 'toolbox', sort: params[:sort])
            li*{ class: "#{'active' if params[:by] == '7days'}" } = link_to 'Last 7 days', root_path(by: '7days', sort: params[:sort])
            li*{ class: "#{'active' if params[:by] == '30days'}" } = link_to 'Last 30 days', root_path(by: '30days', sort: params[:sort])
            li*{ class: "#{'active' if params[:by] == '1year'}" } = link_to 'Last 12 months', root_path(by: '1year', sort: params[:sort])

        .btn-group
          button#sort-by.btn.btn-default.btn-sm.dropdown-toggle*{ data: { toggle: 'dropdown' } }
            - case params[:sort]
            - when 'updated'
              ' Last updated
            - when 'popular'
              ' Most popular
            - when 'recent'
              ' Most recent
            - when 'respected'
              ' Most respected
            - when 'trending'
              ' Trending
            span.caret
          ul.dropdown-menu.pull-right
            div class="dropdown-caret"
            li*{ class: "#{'active' if params[:sort] == 'updated'}" } = link_to 'Last updated', root_path(sort: 'updated', by: params[:by])
            li*{ class: "#{'active' if params[:sort] == 'popular'}" } = link_to 'Most popular', root_path(sort: 'popular', by: params[:by])
            li*{ class: "#{'active' if params[:sort] == 'recent'}" } = link_to 'Most recent', root_path(sort: 'recent', by: params[:by])
            li*{ class: "#{'active' if params[:sort] == 'respected'}" } = link_to 'Most respected', root_path(sort: 'respected', by: params[:by])
            li*{ class: "#{'active' if params[:sort] == 'trending'}" } = link_to 'Trending', root_path(sort: 'trending', by: params[:by])

        .btn-group
          button#difficulty.btn.btn-default.btn-sm.dropdown-toggle*{ data: { toggle: 'dropdown' } }
            - case params[:difficulty]
            - when nil
              ' Any difficulty
            - when 'beginner'
              ' Easy
            - when 'intermediate'
              ' Intermediate
            - when 'advanced'
              ' Advanced
            - when 'hardcore'
              ' Super hard
            span.caret
          ul.dropdown-menu.pull-right
            div class="dropdown-caret"
            li*{ class: "#{'active' if params[:difficulty] == nil}" } = link_to 'Any difficulty', root_path(by: params[:by], sort: params[:sort], type: params[:type])
            li*{ class: "#{'active' if params[:difficulty] == 'beginner'}" } = link_to 'Easy', root_path(difficulty: 'beginner', by: params[:by], sort: params[:sort], type: params[:type])
            li*{ class: "#{'active' if params[:difficulty] == 'intermediate'}" } = link_to 'Intermediate', root_path(difficulty: 'intermediate', by: params[:by], sort: params[:sort], type: params[:type])
            li*{ class: "#{'active' if params[:difficulty] == 'advanced'}" } = link_to 'Advanced', root_path(difficulty: 'advanced', by: params[:by], sort: params[:sort], type: params[:type])
            li*{ class: "#{'active' if params[:difficulty] == 'hardcore'}" } = link_to 'Super hard', root_path(difficulty: 'hardcore', by: params[:by], sort: params[:sort], type: params[:type])

        .btn-group
          button#type.btn.btn-default.btn-sm.dropdown-toggle*{ data: { toggle: 'dropdown' } }
            - case params[:type]
            - when nil
              ' Any type
            - when 'getting_started'
              ' Getting started guide
            - when 'showcase'
              ' Showcase
            - when 'protip'
              ' Protip
            - when 'teardown'
              ' Teardown
            - when 'tutorial'
              ' Tutorial
            - when 'wip'
              ' Work in progress
            span.caret
          ul.dropdown-menu.pull-right
            div class="dropdown-caret"
            li*{ class: "#{'active' if params[:type] == nil}" } = link_to 'Any type', root_path(by: params[:by], sort: params[:sort], difficulty: params[:difficulty])
            li*{ class: "#{'active' if params[:type] == 'getting_started'}" } = link_to 'Getting started guide', root_path(type: 'getting_started', by: params[:by], sort: params[:sort], difficulty: params[:difficulty])
            li*{ class: "#{'active' if params[:type] == 'showcase'}" } = link_to 'Showcase', root_path(type: 'showcase', by: params[:by], sort: params[:sort], difficulty: params[:difficulty])
            li*{ class: "#{'active' if params[:type] == 'protip'}" } = link_to 'Protip', root_path(type: 'protip', by: params[:by], sort: params[:sort], difficulty: params[:difficulty])
            li*{ class: "#{'active' if params[:type] == 'teardown'}" } = link_to 'Teardown', root_path(type: 'teardown', by: params[:by], sort: params[:sort], difficulty: params[:difficulty])
            li*{ class: "#{'active' if params[:type] == 'tutorial'}" } = link_to 'Tutorial', root_path(type: 'tutorial', by: params[:by], sort: params[:sort], difficulty: params[:difficulty])
            li*{ class: "#{'active' if params[:type] == 'wip'}" } = link_to 'Work in progress', root_path(type: 'wip', by: params[:by], sort: params[:sort], difficulty: params[:difficulty])

  - if @projects.exists?
    .row.thumb-list
      - @projects.each_with_index do |project_collection, i|
        = render partial: 'projects/project_thumb', locals: { project: project_collection.project.decorate, ref: 'platform', ref_id: [current_platform.id, params[:sort], params[:by], params[:difficulty], params[:type]].join('_'), offset: (i + ((safe_page_params || 1) - 1) * BaseArticle.per_page) }
        = content_for :js do
          - if project_collection.featured?(I18n.short_locale)
            javascript:
              text = "#{escape_javascript render(partial: 'groups/platforms/featured' )}";
              $(text).appendTo($('.project-#{project_collection.project_id} .project-card .award-container'));

    .text-center= will_paginate @projects

  - else
    p No projects match your criteria.