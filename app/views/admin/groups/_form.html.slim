= f.error_notification

= f.input :user_name
= f.input :full_name
= f.input :email
= f.input :mini_resume
= f.input :city
= f.input :country, input_html: { class: 'form-control' }
= f.input :private, hint: 'Private groups are only visible to and accessible by admins.'
= f.input :hidden, as: :boolean, hint: 'Hidden groups are not listed on pages like hackster.io/platforms.'
= f.input :type, collection: %w(Community Course Event Hackathon HackerSpace List Promotion Platform University)
= render partial: 'shared/image_form', locals: { file_type: 'avatar', human_file_type: 'Profile picture', image_link: @group.avatar.try(:imgix_url, :thumb), help_block: 'This picture needs to be squared, at least 200x200px for best quality.', attribute_type: 'avatar', image_version: 'thumb', model: 'group' }
= render partial: 'shared/image_form', locals: { file_type: 'cover_image', human_file_type: 'Cover image', image_link: @group.cover_image.try(:imgix_url, :cover_mini_thumb), help_block: 'High quality.', attribute_type: 'cover_image', image_version: 'cover_mini_thumb', model: 'group' }

- case @group.type
- when 'Course'
  = f.association :university, collection: University.all
- when 'Event'
  = f.association :hackathon, collection: Hackathon.all
- when 'Hackathon'
- when 'List'
- when 'Promotion'
  = f.association :course, collection: Course.all
- when 'Platform'
  = f.input :plan, collection: Platform::PLANS
  - if @group.respond_to? :synonym_tags_string
    = f.input :synonym_tags_string, hint: 'If multiple names can be used for this platform, enter the alternatives here. For instance "Amazon Web Services" is usually referred to as "AWS".'
  = f.input :product_tags_string
  = f.input :platform_tags_string, hint: 'All the projects tagged with these tags will appear on this page. Separate technologies by commas'
  = f.input :verified, as: :boolean, inline_label: 'Verified', label: false, hint: "Check if a representative of the community is onboard"
  = f.input :is_new, as: :boolean, inline_label: 'Show as new', label: false
  = f.input :enable_new_comment_notifications, as: :boolean, inline_label: 'Enable new comment notifications', label: false, hint: "Sends a daily recap of all new comments posted to projects linked to this platform"
  = render partial: 'shared/image_form', locals: { file_type: 'document', human_file_type: 'Cover image', image_link: @group.cover_image.try(:imgix_url), help_block: 'A high quality picture of your product, at least 1200px wide and 400px high.', attribute_type: 'cover_image', image_version: nil, model: 'group' }
  = f.input :disclaimer, as: :text, input_html: { rows: 4 }

  - if @group.pro?
    = f.input :enable_sub_parts, as: :boolean, inline_label: 'Enable sub-products tab (startups)', label: false, hint: "Products that are based on your technology but manufactured by third parties, eg: they integrate your products in theirs."
    hr
    h4.col-md-8.col-md-offset-4 Dedicated portal parameters
    - subdomain = ClientSubdomain.find_by_subdomain(@group.user_name)
    = f.simple_fields_for :client_subdomain, subdomain do |f_sub|
      = f_sub.input :enabled, as: :boolean, inline_label: 'Enable portal', label: false
      = f_sub.input :subdomain
      = f_sub.input :domain
      = f_sub.input :path_prefix
      = f_sub.input :default_avatar_url
      = f_sub.input :default_project_cover_image_file_path, hint: "with no slash at the beginning"
      = f_sub.input :logout_redirect_url
      = f_sub.input :name
      = f.input :enable_password, as: :boolean, inline_label: 'Enable password protection', label: false
      = f.input :enable_certification, as: :boolean, inline_label: 'Enable project certification', label: false, hint: "Allow admins to mark projects as certified by their platform."
      = f.input :enable_moderators, as: :boolean, inline_label: 'Enable moderation permissions', label: false, hint: "This will allow platform admins and moderators to fully edit projects in the platform. Use only if requested!"
      = f_sub.input :enable_custom_avatars, as: :boolean, inline_label: 'Enable custom avatars', label: false
      = f_sub.input :disable_https, as: :boolean, inline_label: 'Disable forced HTTPS', label: false
      = f_sub.input :disable_login, as: :boolean, inline_label: 'Disable login', label: false
      = f_sub.input :force_login, as: :boolean, inline_label: 'Force login', label: false, hint: "Force all users to be logged in to access the site."
      = f_sub.input :disable_onboarding_screens, as: :boolean, inline_label: 'Disable onboarding screens', label: false
      = f_sub.input :javascript_on_logout, as: :text, label: 'JS to insert on logout'
      = render partial: 'shared/image_form', locals: { file_type: 'logo', human_file_type: 'Portal logo', image_link: subdomain.try(:logo).try(:file_url), help_block: '', attribute_type: 'logo', image_version: nil, model: 'group' }
      = render partial: 'shared/image_form', locals: { file_type: 'favicon', human_file_type: 'Portal favicon', image_link: subdomain.try(:favicon).try(:file_url), help_block: '', attribute_type: 'favicon', image_version: nil, model: 'group[client_subdomain_attributes]' }

      h5.col-md-8.col-md-offset-4 Localization
      = f_sub.input :enable_localization, as: :boolean, inline_label: 'Enable localization', label: false
      = f_sub.input :active_locales, collection: ClientSubdomain::AVAILABLE_LOCALES, as: :check_boxes
      = f_sub.input :default_locale, collection: ClientSubdomain::AVAILABLE_LOCALES
      = f_sub.input :force_explicit_locale, as: :boolean, inline_label: 'Force explicit locale', label: false

    - unless subdomain.present?
      = f.link_to_add 'Add a dedicated portal', :client_subdomain

    hr
    h4.col-md-8.col-md-offset-4 Dedicated portal credentials
    = f.input :reset_portal_credentials, as: :boolean, label: false, inline_label: 'Reset credentials'
    .form-group
      .col-md-4
        label.control-label Username
      .col-md-8
        input.form-control type='text' disabled=true value=@group.user_name
    .form-group
      .col-md-4
        label.control-label Password
      .col-md-8
        input.form-control type='text' disabled=true value=@group.http_password
  hr
  h4.col-md-8.col-md-offset-4 API credentials
  = f.input :reset_api_credentials, as: :boolean, label: false, inline_label: 'Reset credentials'
  .form-group
    .col-md-4
      label.control-label Username
    .col-md-8
      input.form-control type='text' disabled=true value=@group.api_username
  .form-group
    .col-md-4
      label.control-label Password
    .col-md-8
      input.form-control type='text' disabled=true value=@group.api_password

  h4
    strong Don't use these options (especially if you don't know what you're doing)
  = f.input :accept_project_ideas, inline_label: "Accept project ideas?", as: :boolean, hint: "This is useful if your product hasn't shipped yet and you want to encourage your community to start posting project ideas.", label: false
  = f.input :project_ideas_phrasing, collection: @group.project_ideas_phrasing_options, label: 'Phrasing for project ideas prompt'
  = render partial: 'shared/image_form', locals: { file_type: 'company_logo', human_file_type: 'Company logo', image_link: @group.company_logo.try(:file_url), help_block: '', attribute_type: 'company_logo', image_version: nil, model: 'group' }

  = f.input :crowdfunding_link, label: 'Crowdfunding campaign or preorder link', hint: 'Fill in either your preorder or your store link depending on whether your product is available for sale or presale.'
  = f.input :buy_link, label: 'Store link', hint: 'Fill in either your preorder or your store link depending on whether your product is available for sale or presale.'
  = f.input :download_link, label: 'Download link', hint: 'If your product is a piece of software use this instead.'
  = f.input :shoplocket_link, label: 'ShopLocket link'

  = f.input :enable_products, as: :boolean, inline_label: 'Enable startups tab', label: false, hint: "Startups are the ones who use your products commercially."
  = f.input :products_text, label: 'Label for startups section', hint: "Default is \"#{@group.default_products_text}\"."

- when 'University'
.col-md-offset-4.col-md-8
  ==> f.button :submit, :class => 'btn btn-primary'
  = link_to t('.cancel', :default => t("helpers.links.cancel")), admin_groups_path, :class => 'btn btn-default'
  - if @group.persisted?
    = link_to 'Delete', admin_group_path(@group), class: 'btn btn-sm btn-danger', data: { confirm: 'Are you sure you want to delete this group?', method: :delete }
