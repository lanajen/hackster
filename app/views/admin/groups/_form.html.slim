= f.error_notification

= f.input :user_name
= f.input :full_name
= f.input :email
= f.input :mini_resume
= f.input :city
= f.input :country, as: :select
= f.input :private, hint: 'Private groups are only visible to and accessible by admins.'
= f.input :hidden, as: :boolean, hint: 'Hidden groups are not listed on pages like hackster.io/platforms.'
= f.input :type, collection: %w(Community Course Event Hackathon HackerSpace List Promotion Platform University)
= render partial: 'shared/image_form', locals: { file_type: 'avatar', human_file_type: 'Profile picture', image_link: @group.avatar.try(:file_url, :thumb), help_block: 'This picture needs to be squared, at least 200x200px for best quality.', attribute_type: 'avatar', image_version: 'thumb', model: 'group' }

- case @group.type
- when 'Course'
  = f.association :university, collection: University.all
- when 'Event'
  = f.association :hackathon, collection: Hackathon.all
- when 'Hackathon'
- when 'List'
  = f.input :list_type, collection: %w(category organization)
- when 'Promotion'
  = f.association :course, collection: Course.all
- when 'Platform'
  = f.input :product_tags_string
  = f.input :platform_tags_string
  = f.input :verified, as: :boolean, inline_label: 'Verified', label: false, hint: "Check if a representative of the community is onboard"
  = render partial: 'shared/image_form', locals: { file_type: 'document', human_file_type: 'Cover image', image_link: @group.cover_image.try(:file_url), help_block: 'A high quality picture of your product, at least 1200px wide and 400px high.', attribute_type: 'cover_image', image_version: nil, model: 'group' }

  hr
  h4.col-md-8.col-md-offset-4 Whitelabel parameters
  - subdomain = ClientSubdomain.find_by_subdomain(@group.user_name)
  = f.simple_fields_for :client_subdomain, subdomain do |f_sub|
    = f_sub.input :subdomain
    = f_sub.input :domain
    = f_sub.input :name
    = render partial: 'shared/image_form', locals: { file_type: 'logo', human_file_type: 'Portal logo', image_link: subdomain.try(:logo).try(:file_url), help_block: '', attribute_type: 'logo', image_version: nil, model: 'group' }
    = render partial: 'shared/image_form', locals: { file_type: 'favicon', human_file_type: 'Portal favicon', image_link: subdomain.try(:favicon).try(:file_url), help_block: '', attribute_type: 'favicon', image_version: nil, model: 'group[client_subdomain_attributes]' }
  - unless subdomain.present?
    = f.link_to_add 'Add a whitelabel portal', :client_subdomain

- when 'University'
.col-md-offset-4.col-md-8
  ==> f.button :submit, :class => 'btn btn-primary'
  = link_to t('.cancel', :default => t("helpers.links.cancel")), admin_groups_path, :class => 'btn btn-default'
  = link_to 'Delete', admin_group_path(@group), class: 'btn btn-sm btn-danger', data: { confirm: 'Are you sure you want to delete this gorup?', method: :delete }
