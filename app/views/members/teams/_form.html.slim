.form-group.boolean.optional
  input name="use_guest" type="hidden" value="0"
  label.checkbox
    = check_box_tag :use_guest, '1', @project.guest_name.present?
    | I'm posting this project on behalf of someone else

#project-form  style="#{'display:none;' unless @project.guest_name.present?}"
  = simple_form_for @project, url: project_guest_name_path(@project), html: { class: 'widget-form' } do |f|
    = f.error_notification
    = f.input :guest_name, label: 'Author name', hint: "Use this field if you're posting this project on behalf of somebody else. The project team will only consist of this author. Your name will show as \"Posted by\"."

    .form-actions
      = f.submit 'Save changes', class: 'btn btn-primary'
      = link_to 'Cancel', @project, class: 'btn btn-link btn-sm'

#team-form  style="#{'display:none;' if @project.guest_name.present?}"
  = simple_nested_form_for @group, url: project_team_path(@project), html: { class: 'widget-form' } do |f|
    = f.error_notification

    = f.input :full_name, label: 'Team name'
    = f.input :new_user_name, label: 'Pretty URL' do
      .input-group
        span.input-group-addon hackster.io/
        = f.input_field :new_user_name
        span.input-group-addon
          | /#{@project.slug}
    table#sortable.table.table-condensed
      thead
        th User
        th Permission
        th Contribution
        th Status
        th
      tbody
        - (@group.members.includes(:user).sort_by{|m| m.user.name } + [@group.members.new]).each do |member|
          = f.simple_fields_for :members, member, wrapper: false do |f_member|
            tr.fields
              - if member.persisted?
                td= link_to member.user.name, member.user
              - else
                td
                  / # = f_member.association :user, collection: User.where('user_name IS NOT NULL').sort_by{|u| u.name }, label: false
                  = f_member.input :user_id, input_html: { class: 'select2' }, label: false, collection: [], prompt: 'Select a user (type in their name)'
              = f_member.simple_fields_for :permission do |f_perm|
                td= f_perm.input :action, collection: Permission::ACTIONS, label: false
              td= f_member.input :mini_resume, as: :text, label: false
              td
                - if member.persisted?
                  - if member.invitation_pending?
                    - if member.user.invited_to_sign_up?
                      | Pending sign up
                    - else
                      | Invitation pending
                  - else
                    - if member.requested_to_join_at.present? and !member.approved_to_join
                      - if member.approved_to_join.nil?
                        | Pending approval
                        div
                          = link_to 'Approve', member_process_path(member, event: 'approve'), class: 'btn btn-sm btn-success', data: { method: :patch }
                          = link_to 'Reject', member_process_path(member, event: 'reject'), class: 'btn btn-sm btn-danger', data: { method: :patch }
                      - elsif !member.approved_to_join
                        | Rejected
                    - else
                      | Member
                - else
                  | Not saved
              td= f_member.link_to_remove content_tag(:i, '', class: 'fa fa-trash-o'), class: 'btn btn-sm btn-danger'
        tr.sortable-disabled
          td  colspan=4  = f.link_to_add 'Add a member', :members, class: 'btn btn-xs btn-success nested-field-table'
    / %p.help-block
      | Add users to manage your group.

    .form-actions
      = f.submit 'Save changes', class: 'btn btn-primary'
      = link_to 'Cancel', @project, class: 'btn btn-link btn-sm'


= content_for :head do
  = stylesheet_link_tag "//cdnjs.cloudflare.com/ajax/libs/select2/4.0.0-beta.3/css/select2.min.css"

= content_for :js do
  = javascript_include_tag "//cdnjs.cloudflare.com/ajax/libs/select2/4.0.0-beta.3/js/select2.min.js"

  javascript:
    $(function() {
      $('body').on('click', '#use_guest', function() {
        $('#project-form, #team-form').slideToggle();
      });

      var select2Options = {
        placeholder: 'Select a user',
        minimumInputLength: 3,

        ajax: {
          url: "/api/v1/users/autocomplete",
          dataType: 'json',
          delay: 250,
          data: function (params) {
            return {
              q: params.term, // search term
              page: params.page
            };
          },
          processResults: function (data, page) {
            // parse the results into the format expected by Select2.
            // since we are using custom formatting functions we do not need to
            // alter the remote JSON data
            return {
              results: data
            };
          },
          cache: true
        }
        //templateResult: formatRepo, // omitted for brevity, see the source of this page
        //templateSelection: formatRepoSelection // omitted for brevity, see the source of this page
      };

      $('.select2').select2(select2Options);

      $('#team-form').on('nested:fieldAdded', function(event){
        $('.select2').select2(select2Options);
      });
    });
