= content_for :body_class do
  | white

= content_for :no_container do
  - cache [I18n.locale, 'hackerspaces'], expires_in: 24.hours do
    #content
      .container
        h1.text-center  style='margin-bottom:30px'   Find your local hacker space
        p.text-center.small.text-muted
          ' Community-generated content retrieved from
          = link_to 'hackerspaces.org', 'https://wiki.hackerspaces.org', target: '_blank'

      .mg-40  style='width:100%'
        #map  style='width: 100%;height:500px;'

      .container
        .row
          .col-xs-12
            .pull-right
              = link_to content_tag(:i, '', class: 'fa fa-plus') + content_tag(:span, "List your space"), new_hacker_space_path, class: 'btn btn-default'
          .col-xs-12
            table.table
              thead
                th Hacker space
                th Location
              tbody
                - @hacker_spaces.each do |space|
                  tr.hacker-space
                    td
                      span.avatar
                        - if space.avatar(:tiny)
                          = image_tag space.avatar(:tiny), class: 'img-thumb'
                      = link_to space.name, hacker_space_path(space)
                    td= space.short_location

        .alert.alert-info.text-center
          ' Can't find your space?
          = link_to 'Add it to the list.', new_hacker_space_path, class: 'alert-link'

= content_for :head do
  css:
    #map label { width: auto; display:inline; }
    #map img { max-width: none; }

= content_for :js do
  = javascript_include_tag "gmaps/google"
  = javascript_include_tag "//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry"
  = javascript_include_tag '//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js'

  javascript:
    handler = Gmaps.build('Google');
    handler.buildMap({ provider: { scrollwheel: false }, internal: {id: 'map'}}, function(){
      markers = handler.addMarkers(#{raw @markers_hash.to_json});
      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();
    });
