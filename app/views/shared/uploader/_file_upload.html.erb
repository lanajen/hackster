$(function(){
  $('.file_upload.<%= file_type %>').fileupload({
    dataType: 'xml', // This is really important as s3 gives us back the url of the file in a XML document
    limitMultiFileUploads: 1,
    sequentialUploads: true,
    limitConcurrentUploads: 1,
    dropZone: '.file-drop.<%= file_type %>',
    pasteZone: null,

    add: function(e, data) {
      file = data.files[0];
      data = <%= file_type %>Functions.fileuploadAdd(data, file);
      validations = {
        maxFileSize: $('.file_upload.<%= file_type %> input[name="file"]').data('max-file-size')
      }
      dataFileTypes = $('.file_upload.<%= file_type %> input[name="file"]').data('file-type');
      if (dataFileTypes != 'undefined') {
        validations['fileType'] = dataFileTypes;
      }
      errors = checkFileForErrors(file, validations);
      if (errors.length > 0) {
        target = <%= file_type %>Functions.fileuploadTargetForFail(data);
        target.replaceWith('<div class="help-block has-error">Error: ' + errors.join(', ')+'</span>');
      } else {
        $('#' + data.context).data('data', data);

        $.ajax({
          url: Utils.getApiPath() + '/v1<%= signed_url_files_path(locale: nil) %>',
          type: 'GET',
          dataType: 'json',
          data: {file: {name: file.name}, context: data.context},
          async: false,
          success: function(data) {
            form = $('.file_upload.<%= file_type %>');
            form.find('input[name=key]').val(data.key);
            form.find('input[name=policy]').val(data.policy);
            form.find('input[name=signature]').val(data.signature);

            $('#' + data.context).data('data').submit();
          },
          error: function(data) {
            context = decodeURIComponent($.urlParam(this.url, 'context'));
            <%= file_type %>Functions.fail($('#' + context).data('data'));
          }
        });
      }
    },

    fail: function(e, data){
      form = $('.file_upload.<%= file_type %>');
      <%= file_type %>Functions.fail(form.data('data'));
    },

    progress: function(e, data) {
      progress = parseInt(data.loaded / data.total * 100, 10);
      target = <%= file_type %>Functions.fileuploadTargetForProgress(data);
      target.css('width', progress + '%');
      if (progress == 100) {
        target
          .addClass('progress-bar-success')
          .text('Processing...');
      }
    },

    success: function(data) {
      var url = $(data).find('Location').text(); // or Key for path
      form = $('.file_upload.<%= file_type %>');
      form.data('url', url);  // pass it to 'done'
    },

    done: function(e, data){
      $('#' + data.context).data('data', data);

      $(this).data('data', data);
      url = $(this).data('url');

      $.ajax({
        url: Utils.getApiPath() + '/v1<%= files_path(locale: nil) %>',
        type: 'POST',
        dataType: 'json',
        data: {file_url: url, file_type: '<%= file_type %>', context: data.context},
        async: false,
        success: function(data) {
          //id = data.id;
          //<%= file_type %>Functions.checkFileProcessed(id, data.context);
          formData = $('#' + data.context).data('data');
          <%= file_type %>Functions.fileuploadDone(formData, data);
        },
          error: function(data) {
            context = decodeURIComponent($.urlParam(this.url, 'context'));
            <%= file_type %>Functions.fail($('#' + context).data('data'));
          }
      });
    }
  });
});

function checkFileForErrors(file, validations) {
  errors = [];
  maxFileSize = validations['maxFileSize'];
  if (file.size > maxFileSize) {
    errors.push('Maximum file size is ' + maxFileSize / 1000000 + 'MB');
  }
  if (validations['fileType'] != undefined) {
    var fileTypes = validations['fileType'];
    regexp = new RegExp('(\.|\/)(' + fileTypes.split(',').join('|') + ')$', 'gi');
    type = (file.type != '') ? file.type : file.name
    if (!regexp.test(type)) {
      msg = fileTypes.split(',').join(', ');
      errors.push('Allowed file types are ' + msg);
    }
  }
  return errors;
}

$.urlParam = function(url, name){
  results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(url);
  return results[1] || 0;
}