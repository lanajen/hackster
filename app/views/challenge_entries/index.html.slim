p
  = link_to "&larr; Return to challenge admin dashboard".html_safe, challenge_admin_path(@challenge)

h1
  | #{@challenge.name}: contest entries


ul.list-inline
  li= react_component 'ContestCsvExporter', { url: api_private_challenge_entries_csv_path, label: 'Download list as CSV' }, {}
  li= link_to 'Manually add an entry', new_challenge_admin_entry_path(@challenge)

.row
  .col-xs-12= will_paginate @entries

.clearfix
  .btn-group
    button.btn.btn-default.btn-sm.dropdown-toggle*{ data: { toggle: 'dropdown' } }
      ' Filter by status
      span.caret
    ul.dropdown-menu.pull-right
      li*{ class: "#{'active' if params[:status].nil? }" } = link_to 'All', challenge_admin_entries_path(@challenge)
      li*{ class: "#{'active' if params[:status] == 'new'}" } = link_to 'New', challenge_admin_entries_path(@challenge, status: 'new')
      li*{ class: "#{'active' if params[:status] == 'submitted'}" } = link_to 'Submitted', challenge_admin_entries_path(@challenge, status: 'submitted')
      li*{ class: "#{'active' if params[:status] == 'qualified'}" } = link_to 'Qualified', challenge_admin_entries_path(@challenge, status: 'qualified')
      li*{ class: "#{'active' if params[:status] == 'unqualified'}" } = link_to 'Unqualified', challenge_admin_entries_path(@challenge, status: 'unqualified')
      li*{ class: "#{'active' if params[:status] == 'awarded'}" } = link_to 'Awarded', challenge_admin_entries_path(@challenge, status: 'awarded')
      li*{ class: "#{'active' if params[:status] == 'unawarded'}" } = link_to 'Unwarded', challenge_admin_entries_path(@challenge, status: 'unawarded')

table.table.table-striped
  thead
    tr
      th Project
      th Entrant
      th Submission date
      th Status
      th Judging notes
      - if @challenge.activate_voting
        th Votes
      th Prize awarded
      th
  tbody
    - if @entries.any?
      - @entries.each do |entry|
        tr
          td
            = link_to entry.project.name, entry.project
            - if entry.category_id.present?
              br
              strong> Category:
              = entry.category.name
          td
            - user = entry.user
            => link_to image_tag(user.decorate.avatar(:mini), style: 'width: 20px' ), user
            = link_to user.name, user
            - @challenge.challenge_entry_fields.each_with_index do |field, i|
              br
              strong> #{field.label}:
              = entry.send("cfield#{i}")
          td= l entry.created_at
          td.workflow-state= entry.workflow_state
          td= entry.judging_notes.try(:truncate, 100)
          - if @challenge.activate_voting
            td= entry.votes_count
          td= entry.has_prize? ? entry.prizes.pluck(:name).to_sentence : 'None'
          td
            - unless entry.new?
              - if entry.can_approve?
                = link_to content_tag(:i, '', class: 'fa fa-check'), update_workflow_challenge_entry_path(@challenge, entry, event: 'approve', format: :js), class: 'btn btn-xs btn-success workflow-link', rel: 'tooltip', title: 'Approve', data: { container: 'body', challenge_id: @challenge.id, entry_id: entry.id }
              - if entry.can_disqualify?
                = link_to content_tag(:i, '', class: 'fa fa-times'), update_workflow_challenge_entry_path(@challenge, entry, event: 'disqualify', format: :js), class: 'btn btn-xs btn-danger workflow-link', rel: 'tooltip', title: 'Disqualify', data: { container: 'body', challenge_id: @challenge.id, entry_id: entry.id }
            - if @challenge.judging?
              = link_to content_tag(:i, '', class: 'fa fa-pencil'), edit_challenge_entry_path(@challenge, entry), class: 'btn btn-xs btn-default', rel: 'tooltip', title: 'Edit', data: { container: 'body' }
            /- if current_user.is? :admin
              = link_to content_tag(:i, '', class: 'fa fa-trash-o'), challenge_entry_path(@challenge, entry), class: 'btn btn-xs btn-danger', rel: 'tooltip', title: 'Delete', data: { method: :delete, confirm: 'Are you sure you want to delete this entry?', container: 'body' }
    - else
      td.text-center colspan=7 No entries yet

.row
  .col-xs-12= will_paginate @entries

javascript:
  (function() {
    var updateButton = function(link, event) {
      var childrenOf = link.parentNode.children;
      var linkToHide = childrenOf.length > 1
       ? [].slice.call(childrenOf).filter(function(child) { return child.classList.contains('workflow-link') && child !== link })[0]
       : null;

      var eventToClassMap = {
        approve: {
          current: 'btn-success',
          opposite: 'btn-danger',
          title: 'Disqualify',
          iconCurrent: 'fa-check',
          iconOpposite: 'fa-times',
          status: 'qualified'
        },
        disqualify: {
          current: 'btn-danger',
          opposite: 'btn-success',
          title: 'Approve',
          iconCurrent: 'fa-times',
          iconOpposite: 'fa-check',
          status: 'unqualified'
        },
       };

      // Hide second link / button if it exists.
      linkToHide ? linkToHide.classList.add('hide') : false;

      // Swap classes, title for tooltip and toggle href event parameter.
      link.classList.remove(eventToClassMap[event].current);
      link.classList.add(eventToClassMap[event].opposite);
      link.setAttribute('data-original-title', eventToClassMap[event].title);
      link.setAttribute(
        'href',
        link.getAttribute('href')
          .split('=')
          .slice(0,1)
          .concat(['=', eventToClassMap[event].title.toLowerCase()])
          .join('')
      );

      // Update Icon.
      var icon = link.firstChild;
      icon.classList.remove(eventToClassMap[event].iconCurrent);
      icon.classList.add(eventToClassMap[event].iconOpposite);

      // Update Status row.
      var status = [].slice.call(link.parentNode.parentNode.children).reduce(function(acc, child) {
        if(child.classList.contains('workflow-state')) {
          acc = child;
        }
        return acc;
      }, null);

      if(status) {
        status.textContent = eventToClassMap[event].status
      }
    }

    var updateEntry = function(link, event) {
      $.ajax({
        url: link.getAttribute('href'),
        method: 'PUT',
        beforeSend: function(xhr){
          xhr.withCredentials = true;
        },
        data: {
          authenticity_token: window.Utils.getCSRFToken(),
          challenge_id: link.getAttribute('data-challenge-id'),
          event: event,
          id: link.getAttribute('data-entry-id'),
        },
        success: function(res) {
          updateButton(link, event);
        },
        error: function(err) {
          console.error('Update Entry Error', err);
        }
      });
    }

    var onWorkflowLinkClick = function(link, e) {
      e.preventDefault();

      var event = link.getAttribute('data-original-title').toLowerCase();
      var message = event === 'approve'
        ? 'Are you sure you want to approve this entry?'
        : 'Are you sure you want to disqualify this entry?';
      var confirmed = window.confirm(message);

      if(confirmed) {
        updateEntry(link, event);
      }
    }

    var links = [].slice.call(document.querySelectorAll('.workflow-link'));
    links.forEach(function(link) {
      link.addEventListener('click', onWorkflowLinkClick.bind(this, link));
    });
  }());